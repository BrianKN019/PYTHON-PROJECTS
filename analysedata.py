# -*- coding: utf-8 -*-
"""Analysedata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13vhcQ7jKY4BeExFZkRy3HNGdiLwVIgvm

# Analyzing Data with Pandas and Visualizing Results with Matplotlib

**Objective For this Assignment**:
To load and analyze a dataset using the pandas library in Python.
To create simple plots and charts with the matplotlib library for visualizing the data.

**Submission Requirements**
Submit a Jupyter notebook (.ipynb file) or Python script (.py file) containing:

1.   Data loading and exploration steps.
2.   Basic data analysis results.
3.   Visualizations.
4.   Any findings or observations.
"""

pwd

ls -l

"""# Task 1: Load and Explore the Dataset

*   Load the dataset using pandas.
*   Display the first few rows of the dataset using .head() to inspect the data.
"""

# DOWNLOAD AND MOVE TO THE CURRENT PWD.import kagglehub
# Download latest version
# path = kagglehub.dataset_download("ihelon/coffee-sales")
# print("Path to dataset files:", path)

import kagglehub
import os
import shutil

# Download latest version
path = kagglehub.dataset_download("ihelon/coffee-sales")
print("Path to dataset files:", path)

# Get the current working directory
current_directory = os.getcwd()

# Iterate through the downloaded files and move them
for filename in os.listdir(path):
    source_path = os.path.join(path, filename)
    destination_path = os.path.join(current_directory, filename)

    # Move the file to the current working directory
    shutil.move(source_path, destination_path)
    print(f"Moved {filename} to {current_directory}")

# Remove the original download directory (optional)
shutil.rmtree(path)
print(f"Removed temporary directory: {path}")

!ls

# from now onwards , we will be using index.csv. Load the dataset using pandas.
# Display the first few rows of the dataset using .head() to inspect the data.

import pandas as pd

# Load the dataset
try:
  df = pd.read_csv('index.csv')
  # Display the first few rows
  print(df.head())
except FileNotFoundError:
  print("Error: 'index.csv' not found. Please ensure the file is present in the current directory.")
except pd.errors.ParserError:
  print("Error: Could not parse 'index.csv'. Please check the file format.")
except Exception as e:
  print(f"An unexpected error occurred: {e}")

"""**Explore the structure of the dataset by checking the data types and any missing values.**"""

# Explore the structure of the dataset by checking the data types and any missing values.

# Check data types
print(df.dtypes)

# Check for missing values
print(df.isnull().sum())

"""**Clean the dataset by either filling or dropping any missing values.**"""

# Clean the dataset by either filling or dropping any missing values.

# Fill missing values in 'Sales' column with the mean
df['Sales'] = df['Sales'].fillna(df['Sales'].mean())

# Fill missing values in 'Quantity' column with the median
df['Quantity'] = df['Quantity'].fillna(df['Quantity'].median())

# Drop rows with missing values in other columns (if any)
df = df.dropna()

# Verify if there are any missing values left
print(df.isnull().sum())

print(df.columns)

# Check column names
print(df.columns)

# Fill missing values in the 'money' column with the mean
df['money'] = df['money'].fillna(df['money'].mean())

# Fill missing values in the 'card' column with a placeholder
df['card'] = df['card'].fillna('Unknown')

# Drop rows with missing values in other columns (if any)
df = df.dropna()

# Verify if there are any missing values left
print(df.isnull().sum())

"""## **Task 2: Basic Data Analysis**

**2.1 Compute the basic statistics of the numerical columns (e.g., mean, median, standard deviation) using .describe().**
"""

# prompt: Compute the basic statistics of the numerical columns (e.g., mean, median, standard deviation) using .describe().

# Select numerical columns for description
numerical_cols = df.select_dtypes(include=['number'])

# Compute and print basic statistics
print(numerical_cols.describe())

# Compute basic statistics for numerical columns
numerical_stats = df.describe()

# Print the statistics
print(numerical_stats)

"""**2.2 Perform groupings on a categorical column (for example, species, region, or department) and compute the mean of a numerical column for each group.**"""

# Group by 'coffee_name' and calculate the mean of 'money' for each group
grouped_data = df.groupby('coffee_name')['money'].mean()

# Print the grouped data
print(grouped_data)

"""*Identify any patterns or interesting findings from your analysis.*"""

# prompt: Identify any patterns or interesting findings from your analysis.

# Identify patterns and interesting findings

# Analyze the grouped data to find patterns in coffee sales
print(grouped_data.sort_values(ascending=False))

# Further analysis can be done to explore correlations and trends
# For example, check the relationship between sales and other variables,
# seasonal trends, or the impact of promotions.


# Example: Find the coffee with the highest average sales
highest_sales_coffee = grouped_data.idxmax()
print(f"\nThe coffee with the highest average money is: {highest_sales_coffee}")

# Example: Find the coffee with the lowest average sales
lowest_sales_coffee = grouped_data.idxmin()
print(f"The coffee with the lowest average money is: {lowest_sales_coffee}")


# You can add more analysis based on your specific questions and hypotheses.
# For example, you might explore relationships between 'money', 'quantity', 'card', etc.,
# or analyze sales trends over time.

"""**2.2.2 Average Money Spent Per Coffee**"""

# Calculate the average money spent for each coffee type
avg_money_per_coffee = df.groupby('coffee_name')['money'].mean()
print("Average Money Spent Per Coffee Type:")
print(avg_money_per_coffee)

"""**2.2.3 Missing Data in 'Card'**"""

# Check for missing values in 'card' column
missing_card_count = df['card'].isnull().sum()
print(f"Number of Missing Values in 'card': {missing_card_count}")

"""**2.2.4 Range of Money Spent**"""

# Get min and max of 'money'
money_range = df['money'].agg(['min', 'max'])
print("Range of Money Spent:")
print(money_range)

"""**2.2.5 Popular Coffee**"""

# popular_coffee = df['coffee_name'].value_counts()
# print("Popular Coffee Types:")
# print(popular_coffee)

# Count occurrences of each coffee type
popular_coffee = df['coffee_name'].value_counts()
print("Popular Coffee Types:")
popular_coffee

"""**2.2.6 Spending patterns by coffe types**"""

# total_money_per_coffee = df.groupby('coffee_name')['money'].sum()
# print("Total Money Spent Per Coffee Type:")
# print(total_money_per_coffee)

# Total money spent for each coffee type
total_money_per_coffee = df.groupby('coffee_name')['money'].sum()
print("Total Money Spent Per Coffee Type:")
total_money_per_coffee

"""**2.2.7 Cash vs. Card Usage**"""

# payment_types = df['cash_type'].value_counts()
# print("Payment Type Distribution:")
# print(payment_types)

# Count payment types in 'cash_type'
payment_types = df['cash_type'].value_counts()
print("Payment Type Distribution:")
payment_types

"""# **Task 3: Data Visualization**

**Line chart showing trends over time**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Sample DataFrame (replace with your actual DataFrame)
# df = pd.DataFrame({
#     'datetime': ['2025-01-01 10:00:00', '2025-01-02 11:00:00', '2025-01-03 12:00:00'],
#     'money': [50, 100, 75]
# })

# Ensure the 'datetime' column is in datetime format
df['datetime'] = pd.to_datetime(df['datetime'])

# Sort the dataset by the 'datetime' column to ensure proper plotting
df = df.sort_values(by='datetime')

# Group by date (or datetime) and calculate total money spent per day
daily_trends = df.groupby(df['datetime'].dt.date)['money'].sum()

# Plot the line chart
plt.figure(figsize=(10, 6))
plt.plot(daily_trends.index, daily_trends.values, marker='o', linestyle='-', color='blue', label='Daily Money Spent')

# Customize the plot
plt.title("Trends in Money Spent Over Time")
plt.xlabel("Date")
plt.ylabel("Total Money Spent")
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.legend()
plt.grid(True)  # Add grid for better visualization
plt.tight_layout()  # Adjust layout to prevent labels from overlapping
plt.show()

"""**Bar chart showing the comparison of a numerical value across categories**"""

import seaborn as sns
import matplotlib.pyplot as plt

# Group by 'coffee_name' and calculate the total money spent for each coffee type
total_money_per_coffee = df.groupby('coffee_name')['money'].sum().reset_index()

# Plot the bar chart with Seaborn
plt.figure(figsize=(10, 6))
sns.barplot(x='coffee_name', y='money', data=total_money_per_coffee, palette='viridis')

# Customize the chart
plt.title("Total Money Spent by Coffee Type", fontsize=14)
plt.xlabel("Coffee Type", fontsize=12)
plt.ylabel("Total Money Spent", fontsize=12)
plt.xticks(rotation=45, fontsize=10)
plt.yticks(fontsize=10)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show the chart
plt.tight_layout()
plt.show()

"""**Histogram of a numerical column to understand its distribution.**"""

import seaborn as sns
# 'money' is a numerical column in the DataFrame 'df'
# Plot the histogram
plt.figure(figsize=(10, 6))
sns.histplot(df['money'], bins=10, kde=True, color='skyblue') # Added kde for better visualization

# Customize the plot
plt.title("Distribution of Money Spent", fontsize=14)
plt.xlabel("Money Spent", fontsize=12)
plt.ylabel("Frequency", fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show the histogram
plt.tight_layout()
plt.show()

"""Scatter plot to visualize the relationship between two numerical columns"""

import matplotlib.pyplot as plt

# Ensure 'card' is numeric (if needed, convert using pd.to_numeric)
df['card'] = pd.to_numeric(df['card'], errors='coerce')

# Plot the scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(df['card'], df['money'], color='orange', edgecolor='black', alpha=0.7)

# Customize the plot
plt.title("Relationship Between Card and Money Spent")
plt.xlabel("Card")
plt.ylabel("Money Spent")
plt.grid()

# Show the scatter plot
plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Convert 'cash_type' to numerical codes for visualization
df['cash_type_numeric'] = df['cash_type'].astype('category').cat.codes

# Create the scatter plot with Seaborn
plt.figure(figsize=(10, 6))
sns.scatterplot(x='cash_type_numeric', y='money', data=df, hue='cash_type', palette='deep', s=100, edgecolor='black', alpha=0.8)

# Customize the plot
plt.title("Relationship Between Cash Type and Money Spent", fontsize=14)
plt.xlabel("Cash Type (Encoded)", fontsize=12)
plt.ylabel("Money Spent", fontsize=12)
plt.xticks(ticks=range(len(df['cash_type'].unique())), labels=df['cash_type'].unique(), rotation=45, fontsize=10)
plt.yticks(fontsize=10)
plt.legend(title="Cash Type", fontsize=10, title_fontsize=12)
plt.grid(linestyle='--', alpha=0.6)

# Show the scatter plot
plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Ensure 'datetime' is in datetime format
df['datetime'] = pd.to_datetime(df['datetime'])

# Plot the scatter plot with Seaborn
plt.figure(figsize=(12, 6))
sns.scatterplot(x=df['datetime'], y=df['money'], color='blue', edgecolor='black', alpha=0.8)

# Customize the plot
plt.title("Relationship Between Time and Money Spent", fontsize=14)
plt.xlabel("Time", fontsize=12)
plt.ylabel("Money Spent", fontsize=12)
plt.xticks(rotation=45, fontsize=10)
plt.yticks(fontsize=10)
plt.grid(linestyle='--', alpha=0.6)

# Show the scatter plot
plt.tight_layout()
plt.show()